title: Hotel API
baseUri: http://hotelservices.com/api-hotel/
version: 1.0

uses:
  assets: assets.lib.raml

traits:
  pageable:
  # used to apply paging. Example:
  # get:
  #   is: [pageable]
      queryParameters:
        offset:
          description: Skip over a number of elements by specifying an offset value for the query
          type: integer
          required: false
          example: 20
          default: 0
        limit:
          description: Limit the number of elements on the response
          type: integer
          required: false
          example: 80
          default: 10

types:
  Offer:
  type: object
  properties:
    CostPerChild:
      type: number
      multipleOf: 0.01
      required: true
    CostPerAdult:
      type: number
      multipleOf: 0.01
      required: true
    MaxGuests:
      type: integer
      required: true
    Description:
      type: string
    Pictures:
      type: array
      items:
        type: file
    Rooms:
      type: array
      items:
        type: string
        
        
/offers:
  description: Lista ofert znajdujących się w systemie.
  post:
    description: Dodanie nowej oferty.
    body:
      application/json:
        type: Offer
        example: |
          {
            "CostPerChild": 50,
            "CostPerAdult": 80,
            "MaxGuests": 5,
            "Description": "Apartment overlooking the sea",
            "Pictures": [],
            "Room": ["12A”, "14B”]
          }
    responses:
      200:
  /rooms:
    displayName: Offers
    get:
      is: [ assets.paging ]
      description: Lists all active offers and rooms related to them
      queryParameters:
        roomNumber:
          required: false
          type: string
          description: Optional filter on room number that is applied after the query has finished
          example: 13A
      responses:
        200:
          body:
            application/json:
              example: |
                [
                  {
                    "OfferID": [ 5, 7, 14 ],
                    "RoomID": 5,
                    "HotelRoomNumber": "13A"
                  },
                  {
                    "OfferID": [ 4, 6 ],
                    "RoomID": 7,
                    "HotelRoomNumber": "16"
                  }
                ]
        400:
          body:
            application/json:
              example: |
                {
                  "error": "Room number is invalid or does not exist"
                }
  /{offerID}:
    get:
      description: Gets information related to a specific offer with ID equal to offerID
      responses:
        200:
          body:
            application/json:
              type: |
              {
                isActive: boolean,
                costPerChild: double,
                costPerAdult: double,
                maxGuests: int,
                description: string,
                pictures: File[]
              }
        400:
          description: An error containing message describing the type of error
          body:
            application/json:           
              example: |
                {
                  "error": "Room with ID equal to roomID parameter does not exist"
                }
    delete:
      #Usuwanie polega na sprawdzeniu czy w systemie są jeszcze nie zrealizowane rezerwacje w ramach tej oferty. 
      #Jeśli tak - zwracamy błąd 409 i nie podejmujemy żadnych działań
      #Jeśli nie - "odpinamy" pokoje od oferty (tabela OfferHotelRooms) i oznaczamy ofertę jako usuniętą (znacznik isDeleted w tabeli Offer)  
      descritpion: Serwer oznacza ofertę jako usuniętą.
      responses:
        200:
        400:
          description: Oferta o podanym ID nie została odnaleziona
          body:
            application/json:
              example: |
                { "message": "Offer not found or you are not the owner" }
        409:
          description: Oferta nie jest możliwa do usunięcia.
          body:
            application/json:
              example: |
                { "message": "There are still pending reservations for this offer" }
    patch:
      descritpion: Serwer zmienia stan aktywności oferty.
      body:
        application/json:
          { "isActive": boolean }
      responses:
        200:
        400:
          description: Oferta o podanym ID nie została odnaleziona
          body:
            application/json:
              example: |
                { "message": "Offer not found or you are not the owner" }
    /rooms:
      displayName: Rooms
      get:
        is: [ assets.paging ]
        description: Lists all rooms related to an active hotel offer
        queryParameters:
          roomNumber:
            required: false
            type: string
            description: Optional filter on room number that is applied after the query has finished
            example: 13A
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "Rooms":
                    [
                      {
                        "RoomID": 5,
                        "HotelRoomNumber": "13A"
                      },
                      {
                        "RoomID": 7,
                        "HotelRoomNumber": "16"
                      }
                    ]
                  }
          400:
            body:
              application/json:
                example: |
                  {
                    "error": "Offer does not belong to this hotel/Invalid room number"
      /{roomID}:
        delete:       
          description: Usuwa powiązanie między ofertą i pokojem z tabeli OfferHotelRooms
          responses:
              200:
                description: poprawnie i usuwanie
              400:
                example: |
                  {
                    "error": "nieistniejąca oferta/pokój"
                  }

# Usuwa permamentnie wpis w tabeli HotelRoom o pokoju ze wskazanym roomID.
/rooms/{roomID}:
  delete:
   #Usuwanie polega na sprawdzeniu czy w systemie są jeszcze nie zrealizowane rezerwacje w ramach tego pokoju. 
   #Przenosimy rezerwacje do innych pokoi zebranych w ramach tej samej oferty (ZAWSZE). 
   #Jeśli rezerwacji nie da się przenieść do innych pokoi w ramach tej samej oferty - zwracamy błąd 409 i nie podejmujemy żadnych działań.
   #Jeśli rezerwacje da się przenieść lub nie ma żadnych rezerwacji - we wszystkich rezerwacjach (tabela z rezerwacjami), które wskazują na rozpatrywany pokój
   #zmieniamy pokój na NULL (należy rozwiązać problem ze spójnością referencyjną) i usuwamy pokój (tabela HotelRoom).
    descritpion: Serwer usuwa pokój o wskazanym ID.
    responses:
      200:
      400:
        description: Pokój o wskazanym ID nie został odnaleziony.
        body:
          application/json:
            example: |
              { "message": "Room not found or you are not the owner" }
      409:
        description: Pokój nie jest możliwy do usunięcia.
        body:
          application/json:
            example: |
              { "message": "There are still pending reservations for this room that cannot be moved" }


/reservations:
  get:
    description: fetches current (and future) reservations made by clients and information regarding these clients
    queryParameters:
      currentOnly:
        required: false
        type: boolean
        description: get reservations that are currently underway or all reservations (including ones that begin in the future)
      roomID:
        required: false
        type: int
        description: get reservations connected with room with ID equal to roomID parameter
    responses:
      200:
        body:
          application/json:
            description: Returns an array of objects containing reservation and client information related to a hotel room reservation.  
            type: |
              [
                {
                  Reservation:
                  {
                    ReservationID: int,
                    HotelRoomNumber: string,
                    OfferID: int,
                    FromTime: date,
                    ToTime: date,
                    ChildrenCount: int,
                    AdultsCount: int
                  }
                  Client: 
                  {
                    ID: int,
                    Name: string,
                    Surname: string
                  }
                }
              ]
      400:
        body:
          application/json:
            description: An error containing message describing the type of error
            example: |
              {
                "error": "Room with ID equal to roomID parameter does not exist"
              }
              
uses:
  assets: assets.lib.raml


title: Hotel API
baseUri: http://hotelservices.com/api-hotel/
version: 1.0

traits:
  pageable:
  # used to apply paging. Example:
  # get:
  #   is: [pageable]
      queryParameters:
        page:
          description: Number of page to show results
          type: integer
          required: false
          example: 20
          default: 0

types:
  offer:
  type: object
  properties:
    costPerChild:
      type: number
      multipleOf: 0.01
      required: true
    costPerAdult:
      type: number
      multipleOf: 0.01
      required: true
    maxGuests:
      type: integer
      required: true
    description:
      type: string
    pictures:
      type: array
      items:
        type: file
    rooms:
      type: array
      required: false
      items:
        type: string
   
     
#--------------------------------------------------------------------------------------------------------
#-----------------------------------------------OFFERS---------------------------------------------------
#--------------------------------------------------------------------------------------------------------
/offers:
  description: Lista ofert znajdujących się w systemie.
  
  #HERE ADD GET - pobieranie listy wszystkich ofert
  
  post:
    description: Dodanie nowej oferty.
    body:
      application/json:
        type: offer
        example: |
        {
          "costPerChild": 50,
          "costPerAdult": 80,
          "maxGuests": 5,
          "description": "Apartment overlooking the sea",
          "pictures": [],
          "rooms": ["12A”, "14B”]
        }
    responses:
      200:
      #optional - return offerID
  /{offerID}:
    get:
      description: Gets information related to a specific offer with ID equal to offerID
      responses:
        200:
          body:
            application/json:
              type: |
                {
                  isActive: boolean,
                  costPerChild: double,
                  costPerAdult: double,
                  maxGuests: int,
                  description: string,
                  pictures: File[]
                }
        400:
          description: An error containing message describing the type of error
          body:
            application/json:           
              example: |
                {
                  "error": "Room with ID equal to roomID parameter does not exist"
                }
    delete:
      #Usuwanie polega na sprawdzeniu czy w systemie są jeszcze nie zrealizowane rezerwacje w ramach tej oferty. 
      #Jeśli tak - zwracamy błąd 409 i nie podejmujemy żadnych działań
      #Jeśli nie - "odpinamy" pokoje od oferty (tabela OfferHotelRooms) i oznaczamy ofertę jako usuniętą (znacznik isDeleted w tabeli Offer)  
      descritpion: Serwer oznacza ofertę jako usuniętą.
      responses:
        200:
        400:
          description: Oferta o podanym ID nie została odnaleziona
          body:
            application/json:
              example: |
                { "error": "Offer not found or you are not the owner" }
        409:
          description: Oferta nie jest możliwa do usunięcia.
          body:
            application/json:
              example: |
                { "error": "There are still pending reservations for this offer" }
    patch:
      descritpion: Serwer zmienia stan aktywności oferty.
      body:
        application/json:
          { "isActive": boolean }
      responses:
        200:
        400:
          description: Oferta o podanym ID nie została odnaleziona
          body:
            application/json:
              example: |
              { 
                "error": "Offer not found or you are not the owner" 
              }
    /rooms:
      get:
        description: Lists all rooms related to an active hotel offer
        queryParameters:
          roomNumber:
            required: false
            type: string
            description: Optional filter on room number that is applied after the query has finished
            example: 13A
        responses:
          200:
            body:
              application/json:
                example: |       
                  [
                    {
                      "roomID": 5,
                      "hotelRoomNumber": "13A"
                    },
                    {
                      "roomID": 7,
                      "hotelRoomNumber": "16"
                    }
                  ]
          400:
            body:
              application/json:
                example: |
                  {
                    "error": "Offer does not belong to this hotel/Invalid room number"
                  }      
      post:
        description: Add a room associated with hotel offer.
        body:
          application/json:
            type: object
            properties:
              roomID: integer
            example: |
              {
                "roomID": 21
              }
        responses:
          200:
          404:
            body:
              application/json:
                example: |
                  {
                    "error": "Room with ID equal to roomID parameter does not exist"
                  }
      
      /{roomID}:
        delete:       
          description: Usuwa powiązanie między ofertą i pokojem z tabeli OfferHotelRooms
          responses:
            200:
            400:
              body:
                application/json:
                  example: |
                    {
                      "error": "nieistniejąca oferta/pokój"
                    }
                  
#--------------------------------------------------------------------------------------------------------
#-----------------------------------------------ROOMS----------------------------------------------------
#--------------------------------------------------------------------------------------------------------
/rooms:
  get:
    is: [pageable]
    description: Lists all rooms 
    queryParameters:
      roomNumber:
        required: false
        type: string
        description: Optional filter on room number that is applied after the query has finished
        example: 13A
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "roomID": 5,
                  "hotelRoomNumber": "13A"
                },
                {
                  "roomID": 7,
                  "hotelRoomNumber": "16"
                }
              ]
      400:
        body:
          application/json:
            example: |
              {
                "error": "Room number is invalid or does not exist"
              }
  post:
    description: Add a room not associated with any offer. (HotelRoom table)
    body:
      application/json:
        type: object
        properties:
          hotelRoomNumber: string
        example: |
          {
            "hotelRoomNumber": "12F"
          }
    responses:
      200:
        description: Room added successfully.
        body:
          application/json:
            type: object
            properties:
              roomID: integer
            example: |
              {
                "roomID": 14
              } 
  /{roomID}:
    delete:
     #Usuwanie polega na sprawdzeniu czy w systemie są jeszcze nie zrealizowane rezerwacje w ramach tego pokoju. 
     #Przenosimy rezerwacje do innych pokoi zebranych w ramach tej samej oferty (ZAWSZE). 
     #Jeśli rezerwacji nie da się przenieść do innych pokoi w ramach tej samej oferty - zwracamy błąd 409 i nie podejmujemy żadnych działań.
     #Jeśli rezerwacje da się przenieść lub nie ma żadnych rezerwacji - we wszystkich rezerwacjach (tabela z rezerwacjami), które wskazują na rozpatrywany pokój
     #zmieniamy pokój na NULL (należy rozwiązać problem ze spójnością referencyjną) i usuwamy pokój (tabela HotelRoom).
      descritpion: Serwer usuwa pokój o wskazanym ID. (Usuwany jest wpis w tabeli HotelRoom)
      responses:
        200:
        400:
          description: Pokój o wskazanym ID nie został odnaleziony.
          body:
            application/json:
              example: |
                { "error": "Room not found or you are not the owner" }
        409:
          description: Pokój nie jest możliwy do usunięcia.
          body:
            application/json:
              example: |
                { "error": "There are still pending reservations for this room that cannot be moved" }

#--------------------------------------------------------------------------------------------------------
#--------------------------------------------RESERVATIONS------------------------------------------------
#--------------------------------------------------------------------------------------------------------
/reservations:
  get:
    description: fetches current (and future) reservations made by clients and information regarding these clients
    queryParameters:
      currentOnly:
        required: false
        type: boolean
        description: get reservations that are currently underway or all reservations (including ones that begin in the future)
      roomID:
        required: false
        type: int
        description: get reservations connected with room with ID equal to roomID parameter
    responses:
      200:
        body:
          application/json:
            description: Returns an array of objects containing reservation and client information related to a hotel room reservation.  
            type: |
              [
                {
                  reservation:
                  {
                    reservationID: int,
                    hotelRoomNumber: string,
                    offerID: int,
                    fromTime: date,
                    toTime: date,
                    childrenCount: int,
                    adultsCount: int
                  }
                  client: 
                  {
                    clientID: int,                    
                    name: string,
                    surname: string
                  }
                }
              ]
      400:
        body:
          application/json:
            description: An error containing message describing the type of error
            example: |
              {
                "error": "Room with ID equal to roomID parameter does not exist"
              }
